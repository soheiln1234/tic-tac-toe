{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport createDataContext from \"./createDataContext\";\n\nvar blogReducer = function blogReducer(state, action) {\n  switch (action.type) {\n    case 'delete_blogpost':\n      return state.filter(function (blogPost) {\n        return blogPost.id !== action.payload;\n      });\n\n    case 'add_blogpost':\n      return [].concat(_toConsumableArray(state), [{\n        id: Math.floor(Math.random() * 99999),\n        title: action.payload.title,\n        content: action.payload.content\n      }]);\n\n    case 'edit_blogpost':\n      return state.map(function (blogPost) {\n        if (blogPost.id === action.payload) {\n          return action.playload;\n        } else {\n          return blogPost;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar addBlogPost = function addBlogPost(dispatch) {\n  return function (content, title, callback) {\n    dispatch({\n      type: 'add_blogpost',\n      payload: {\n        content: content,\n        title: title\n      }\n    });\n    callback();\n  };\n};\n\nvar deleteBlogPost = function deleteBlogPost(dispatch) {\n  return function (id) {\n    dispatch({\n      type: 'delete_blogpost',\n      payload: id\n    });\n  };\n};\n\nvar editBlogPost = function editBlogPost(dispatch) {\n  return function (id, title, content, callback) {\n    dispatch({\n      type: 'edit_blogpost',\n      payload: {\n        id: id,\n        title: title,\n        content: content\n      }\n    });\n\n    if (callback) {\n      callback();\n    }\n  };\n};\n\nvar _createDataContext = createDataContext(blogReducer, {\n  addBlogPost: addBlogPost,\n  deleteBlogPost: deleteBlogPost,\n  editBlogPost: editBlogPost\n}, []),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["C:/Users/sohei/Blog/src/context/BlogContext.js"],"names":["createDataContext","blogReducer","state","action","type","filter","blogPost","id","payload","Math","floor","random","title","content","map","playload","addBlogPost","dispatch","callback","deleteBlogPost","editBlogPost","Context","Provider"],"mappings":";AAAA,OAAOA,iBAAP;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAa,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,EAAT,KAAgBJ,MAAM,CAACK,OAA3B;AAAA,OAArB,CAAP;;AACF,SAAK,cAAL;AACE,0CACKN,KADL,IAEE;AACEK,QAAAA,EAAE,EAAEE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADN;AAEEC,QAAAA,KAAK,EAAET,MAAM,CAACK,OAAP,CAAeI,KAFxB;AAGEC,QAAAA,OAAO,EAAEV,MAAM,CAACK,OAAP,CAAeK;AAH1B,OAFF;;AAQF,SAAK,eAAL;AACE,aAAOX,KAAK,CAACY,GAAN,CAAU,UAACR,QAAD,EAAc;AAC7B,YAAGA,QAAQ,CAACC,EAAT,KAAgBJ,MAAM,CAACK,OAA1B,EAAmC;AACjC,iBAAOL,MAAM,CAACY,QAAd;AACD,SAFD,MAGI;AACF,iBAAOT,QAAP;AACD;AACF,OAPM,CAAP;;AAQF;AACE,aAAOJ,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9B,SAAO,UAACJ,OAAD,EAASD,KAAT,EAAeM,QAAf,EAA4B;AACjCD,IAAAA,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE,cAAR;AAAuBI,MAAAA,OAAO,EAAC;AAACK,QAAAA,OAAO,EAAPA,OAAD;AAASD,QAAAA,KAAK,EAALA;AAAT;AAA/B,KAAD,CAAR;AACAM,IAAAA,QAAQ;AACT,GAHD;AAID,CALD;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAF,QAAQ,EAAI;AACjC,SAAO,UAAAV,EAAE,EAAI;AACXU,IAAAA,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE,iBAAR;AAA2BI,MAAAA,OAAO,EAAED;AAApC,KAAD,CAAR;AACD,GAFD;AAGD,CAJD;;AAMA,IAAMa,YAAY,GAAG,SAAfA,YAAe,CAAAH,QAAQ,EAAI;AAE/B,SAAO,UAACV,EAAD,EAAIK,KAAJ,EAAUC,OAAV,EAAkBK,QAAlB,EAA+B;AACpCD,IAAAA,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE,eAAR;AAAyBI,MAAAA,OAAO,EAAC;AAACD,QAAAA,EAAE,EAAFA,EAAD;AAAIK,QAAAA,KAAK,EAALA,KAAJ;AAAUC,QAAAA,OAAO,EAAPA;AAAV;AAAjC,KAAD,CAAR;;AACA,QAAIK,QAAJ,EAAc;AACZA,MAAAA,QAAQ;AACT;AACF,GALD;AAMD,CARD;;AAUO,yBAA8BlB,iBAAiB,CACpDC,WADoD,EAEpD;AAAEe,EAAAA,WAAW,EAAXA,WAAF;AAAeG,EAAAA,cAAc,EAAdA,cAAf;AAA8BC,EAAAA,YAAY,EAAZA;AAA9B,CAFoD,EAGpD,EAHoD,CAA/C;AAAA,IAAQC,OAAR,sBAAQA,OAAR;AAAA,IAAiBC,QAAjB,sBAAiBA,QAAjB","sourcesContent":["import createDataContext from './createDataContext';\r\n\r\nconst blogReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'delete_blogpost':\r\n      return state.filter(blogPost => blogPost.id !== action.payload);\r\n    case 'add_blogpost':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: Math.floor(Math.random() * 99999),\r\n          title: action.payload.title,\r\n          content: action.payload.content\r\n        }\r\n      ];\r\n    case 'edit_blogpost':\r\n      return state.map((blogPost) => {\r\n        if(blogPost.id === action.payload ){\r\n          return action.playload;\r\n        }\r\n        else{\r\n          return blogPost;\r\n        }\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst addBlogPost = dispatch => {\r\n  return (content,title,callback) => {\r\n    dispatch({ type: 'add_blogpost',payload:{content,title}});\r\n    callback();\r\n  };\r\n};\r\nconst deleteBlogPost = dispatch => {\r\n  return id => {\r\n    dispatch({ type: 'delete_blogpost', payload: id });\r\n  };\r\n};\r\n\r\nconst editBlogPost = dispatch => {\r\n\r\n  return (id,title,content,callback) => {\r\n    dispatch({ type: 'edit_blogpost', payload:{id,title,content}});\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  };\r\n};\r\n\r\nexport const { Context, Provider } = createDataContext(\r\n  blogReducer,\r\n  { addBlogPost, deleteBlogPost,editBlogPost },\r\n  []\r\n);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}